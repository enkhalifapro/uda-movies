name: Frontend Deploy Workflow

on:
  push: # pull_request:
    branches:
      - main
    paths:
      - 'starter/frontend'
  workflow_dispatch:

jobs:

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Install dependencies
        run: npm install
        working-directory: ./starter/frontend

      - name: Test
        run: |
          npm run lint
        working-directory: ./starter/frontend

  build_docker_image:
    runs-on: ubuntu-latest
#    needs:
#      - test

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        run: |
          docker buildx build --load --tag frontend:${{ github.sha }} .
        working-directory: ./starter/frontend
      - name: Save Docker image to archive
        run: |
          mkdir -p build
          docker save frontend:${{ github.sha }} | gzip > build/frontend.tar.gz
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: build/

  deploy:
    needs: build_docker_image
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend
          path: ./downloaded-artifact

      - name: Load Docker image from archive
        run: |
          gunzip -c downloaded-artifact/frontend.tar.gz | docker load


      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker image to Amazon ECR
        run: |
          docker tag frontend:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }}

#      - name: Connect to k8s Cluster
#        run: |
#          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER }}

      - name: Set up kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Deploy
        uses: safe2008/eks-actions@v0.0.4
        env:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: $AWS_REGION
          cluster_name: $EKS_CLUSTER
#        with:
#          args: |
#            kubectl get nodes
##            kubectl set image deployment $K8S_DEPLOYMENT -n $K8S_NAMESPACE
##            $K8S_DEPLOYMENT=$DOCKER_IMAGE:$DOCKER_TAG &&
##            kubectl rollout status deployment/$K8S_DEPLOYMENT -n $K8S_NAMESPACE

      - name: Update k8s Deployment
        run: |
          # setup kustomize
          kubectl get nodes
#          curl -sSL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz -o kustomize.tar.gz
#          tar -xzvf kustomize.tar.gz
#          sudo mv kustomize /usr/local/bin/
          
          # update deployment

#          cd starter/frontend/k8s
#          kustomize edit set image frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }}
#          kustomize build | kubectl apply -f -
          
