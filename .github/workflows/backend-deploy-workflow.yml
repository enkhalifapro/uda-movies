name: Backend Build Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'starter/backend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: pipenv install --dev
        working-directory: ./starter/backend

      - name: Lint Using Flake
        run: pipenv run flake8 .
        working-directory: ./starter/backend

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pip install pipenv  # Install pipenv if it's not already available

      - name: Install dependencies
        run: pipenv install --dev  # Install all dependencies from Pipfile.lock
        working-directory: ./starter/backend

      - name: Run Unit Tests
        run: pipenv run test
        working-directory: ./starter/backend

  build:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        run: |
          docker buildx build --load --tag backend:${{ github.sha }} .
        working-directory: ./starter/backend
      - name: Save Docker image to archive
        run: |
          mkdir -p build
          docker save backend:${{ github.sha }} | gzip > build/backend.tar.gz
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: build/

  deploy:
    needs: build_docker_image
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend
          path: ./downloaded-artifact

      - name: Load Docker image from archive
        run: |
          gunzip -c downloaded-artifact/backend.tar.gz | docker load


      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker image to Amazon ECR
        run: |
          docker tag backend:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:${{ github.sha }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Set up kubectl config
        run: |
          aws eks update-kubeconfig --name cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Kustomize
        run: |
          curl -sSL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz -o kustomize.tar.gz
          tar -xzvf kustomize.tar.gz
          mv kustomize /usr/local/bin/

      - name: Update k8s Deployment
        run: |
          cd starter/backend/k8s
          kustomize edit set image backend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:${{ github.sha }}
          kustomize build | kubectl apply -f -

